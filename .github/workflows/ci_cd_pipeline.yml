name: CI/CD Pipeline

on:
  push:
    branches:
      - main   # Run the pipeline on pushes to the main branch
  pull_request:
    branches:
      - main   # Run the pipeline for pull requests targeting the main branch

jobs:
  # CI Job
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Rust
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Cache Rust dependencies
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Build the Rust project
      - name: Build project
        run: cargo build --locked --release

      # Run tests
      - name: Run tests
        run: cargo test --locked --release

      # Run linter (clippy) for good practices
     #- name: Run clippy for linting
      #  run: cargo clippy --locked --all-targets --all-features -- -D warnings
      
      # Check code formatting
      - name: Check formatting
        run: cargo fmt --all -- --check

  # CD Job
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci # Run CD only if the CI job was successful

    steps:
      # Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Log in to the container registry
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build \
            --build-arg RUST_VERSION=1.83.0 \
            --build-arg APP_NAME=wallet-service \
            -t ${{ secrets.DOCKER_USERNAME }}/wallet-service:latest .

      # Push Docker image to the container registry
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/wallet-service:latest

      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Install AWS CLI
          sudo apt-get update
          sudo apt-get install -y awscli
          # Configure AWS credentials
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
          # Authenticate with EKS
          aws eks update-kubeconfig --name marcus-cluster

      # Apply Kubernetes manifests to the EKS cluster
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml